#!/bin/sh -e

base=$(readlink -f $0)
base_dir=${base%/*}
pki_dir="$base_dir/pki"
conf_dir="$base_dir/conf"
output_dir="$base_dir/ovpn"

die() {
	echo -e "\e[1;31m>>> Error: \e[0m\e[1m$1"
	exit 1
}

warning() {
	echo -e "\e[1;33m>>> Warning: \e[0m\e[1m$1"
}

msg() {
	echo -e "\e[1;32m>>> $1: \e[0m\e[1m$2"
}

check_files_exists() {
	local files="$template_file $ca_file $user_cert_file
		$user_key_file $static_key_file"
	for file in $files; do
		[ -f $file ] || die "File ${file##*/} not found."
	done
}

generate_ovpn() {
	cat <<-EOF > "$ovpn_file"
	$(cat "$template_file")
	<ca>
	$(cat "$ca_file")
	</ca>
	<cert>
	$(cat "$user_cert_file")
	</cert>
	<key>
	$(cat "$user_key_file")
	</key>
	<tls-auth>
	$(cat "$static_key_file")
	</tls-auth>
	EOF
}

create_dhparam() {
	if [ -f "$conf_dir/dhparam.pem" ]; then
		warning "dhpamarm already exists, skipping"
		return 0
	fi
	command -v openssl >/dev/null 2>&1 || die "Could not find openssl."
	msg "Generating" "Diffie-Hellman parameters"
	openssl dhparam -dsaparam -out "$conf_dir/dhparam.pem" 4096
}

create_tls_key() {
	if [ -f "$conf_dir/ta.key" ]; then
		warning "Key already exists, skipping"
		return 0
	fi
	command -v openvpn >/dev/null 2>&1 || die "Could not find openvpn."
	msg "Generating" "TLS key"
	openvpn --genkey --secret "$conf_dir/ta.key"
}

check_config_exists() {
	if [ -f "$ovpn_file" ]; then
		read -r -p "Config ${ovpn_file##*/} exist, do you want to overwrite it? [y/N] " response
		case "$response" in
			[yY][eE][sS]|[yY])
				break
				;;
			*)
				die "Canceled config generation."
				;;
		esac
	fi
}

create_ca() {
	msg "Generating" "Certificate authority"
	easypki create --filename ca --ca "OpenVPN CA"
}

create_server() {
	msg "Generating" "Server certificate"
	easypki create "$server_name"
}

create_pki_user() {
	command -v easypki >/dev/null 2>&1 || die "Could not find easypki."
	msg "Creating" "PKI user $user"
	easypki create --client --email $email $user
}

init_pki() {
	mkdir -p "$conf_dir" "$pki_dir" "$output_dir"
	create_ca
	create_server
	create_dhparam
	create_tls_key
	msg "Generating" "All done!"
}

create_user() {
	[ -z ${user+x} ] && die "Please specify an user. See -h for help."
	[ -z ${email+x} ] && die "Please specify an email address. See -h for help."
	create_pki_user
	check_config_exists
	check_files_exists
	generate_ovpn
	msg "Creating" "Finished."
}

list_users() {
	local user ovpn="Missing"
	for key in $pki_dir/ca/keys/*.key; do
		user="${key##*/}"
		user="${user%.*}"
		case $user in
			ca|$server_name) : ;;
			*)
			if [ -f "$pki_dir/ca/certs/$user.crt" ]; then
				[ -f "$output_dir/$server_name-$user.ovpn" ] && ovpn=
				echo -e "\e[0m\e[34m>>> User: \e[0m\e[1m$user"
			fi
		esac
	done
}

read_config() {
	if [ -f "$conf_dir/easypki.conf" ]; then
		source "$conf_dir/easypki.conf"
	else
		die "Base configuration not found. Check readme file."
	fi
	export PKI_ROOT="$pki_dir"
	export PKI_ORGANIZATION="$pki_org"
	export PKI_ORGANIZATIONAL_UNIT="$pki_ou"
	export PKI_COUNTRY="$pki_country"
	export PKI_LOCALITY="$pki_locality"
	export PKI_PROVINCE="$pki_province"
}

usage() {
	cat <<-EOF
	OpenVPN-easypki:
	
	    OpenVPN-easypki will make it easy to setup a PKI certificate authority
	    Diffie-Hellman parameters static TLS key and generate OpenVPN inline (ovpn)
	    user configuration files.

	Usage: $0 command

	Available commands:
	    init:	Initialize new pki store including server certificate and keys
	    create:	Create new user
	    list:	List users

	Available options:
	    create:
	        -u user common name
	        -e user email address
	    general:
	        -h This help

	EOF
	exit 0
}




if [ -z "$1" ]; then
	usage
else
	cmd="$1"
	shift
fi

while getopts "u:e:h" opt; do
		case $opt in
			u) user=$OPTARG;;
			e) email=$OPTARG;;
			h) usage;;
		esac
done

shift $(( $OPTIND - 1 ))

read_config

# pki files
ca_file="$pki_dir/ca/certs/ca.crt"
user_key_file="$pki_dir/ca/keys/$user.key"
user_cert_file="$pki_dir/ca/certs/$user.crt"
# generic files
static_key_file="$conf_dir/ta.key"
template_file="$conf_dir/ovpn.tpl"
# user config
ovpn_file="$output_dir/$server_name-$user.ovpn"

case "$cmd" in
	init) init_pki;;
	create) create_user;;
	list) list_users;;
	*) usage;;
esac
